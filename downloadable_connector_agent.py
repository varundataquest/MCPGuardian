#!/usr/bin/env python3
"""
MCP Guardian Connector Agent - Downloadable Version
==================================================

This is a simple, standalone version of the MCP Guardian connector agent
that generates production-ready code for connecting to MCP servers.

Usage:
    python downloadable_connector_agent.py

This will generate example agent files that you can download and use.
"""

import asyncio
import json
import os
import sys
from typing import Dict, Any, List
from pathlib import Path
from datetime import datetime

class ConnectorAgent:
    """MCP Guardian Connector Agent - Generates runnable code for MCP servers"""
    
    def __init__(self):
        self.name = "MCP Guardian Connector Agent"
        self.version = "1.0.0"
    
    def generate_langchain_agent(self, server_name: str, endpoint: str, auth_model: str, capabilities: List[str], prompt: str) -> str:
        """Generate LangChain agent code"""
        
        main_capability = self._extract_main_capability(prompt, capabilities)
        class_name = self._to_class_name(server_name)
        
        code = f'''#!/usr/bin/env python3
"""
MCP Agent for {server_name}
Generated by MCP Guardian
Task: {prompt}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""

import os
import asyncio
from typing import List, Dict, Any
from langchain.agents import AgentExecutor, create_openai_functions_agent
from langchain.tools import BaseTool
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from modelcontextprotocol import ClientSession, StdioServerParameters
from modelcontextprotocol.models import TextContent

class {class_name}Tool(BaseTool):
    """Tool for interacting with {server_name}"""
    
    name = "{server_name.replace('-', '_')}"
    description = "Interact with {server_name} for {main_capability}"
    
    def __init__(self, session: ClientSession):
        super().__init__()
        self.session = session
    
    async def _arun(self, query: str) -> str:
        """Execute the tool asynchronously"""
        try:
            # Send request to MCP server
            response = await self.session.call_tool(
                name=self.name,
                arguments={{"query": query}}
            )
            return response.content[0].text
        except Exception as e:
            return f"Error: {{str(e)}}"

class {class_name}Agent:
    """Agent for {server_name} operations"""
    
    def __init__(self):
        self.llm = ChatOpenAI(
            model="gpt-4",
            temperature=0,
            api_key=os.getenv("OPENAI_API_KEY")
        )
        self.session = None
        self.agent_executor = None
    
    async def connect_to_server(self):
        """Connect to the MCP server"""
        try:
            # Connect to MCP server
            server_params = StdioServerParameters(
                command="{endpoint}",
                args=[]
            )
            
            self.session = ClientSession(server_params)
            await self.session.initialize()
            
            # Create tool
            tool = {class_name}Tool(self.session)
            
            # Create agent
            prompt = ChatPromptTemplate.from_messages([
                ("system", f"""You are an AI agent that can {main_capability} using {server_name}.
                
Your capabilities include: {', '.join(capabilities)}

Always use the {server_name.replace('-', '_')} tool to perform operations.
Be helpful, efficient, and secure in your responses."""),
                MessagesPlaceholder(variable_name="chat_history"),
                ("human", "{{input}}"),
                MessagesPlaceholder(variable_name="agent_scratchpad"),
            ])
            
            agent = create_openai_functions_agent(self.llm, [tool], prompt)
            self.agent_executor = AgentExecutor(agent=agent, tools=[tool], verbose=True)
            
            print(f"✅ Connected to {server_name}")
            return True
            
        except Exception as e:
            print(f"❌ Failed to connect to {server_name}: {{str(e)}}")
            return False
    
    async def run(self, user_input: str) -> str:
        """Run the agent with user input"""
        if not self.agent_executor:
            if not await self.connect_to_server():
                return "Failed to connect to server"
        
        try:
            result = await self.agent_executor.ainvoke({{"input": user_input}})
            return result["output"]
        except Exception as e:
            return f"Error: {{str(e)}}"
    
    async def close(self):
        """Close the connection"""
        if self.session:
            await self.session.close()

async def main():
    """Main function to run the agent"""
    print("🚀 Starting {class_name} Agent")
    print(f"📋 Task: {prompt}")
    print(f"🔗 Server: {server_name}")
    print(f"🔐 Auth: {auth_model}")
    print("-" * 50)
    
    # Create agent
    agent = {class_name}Agent()
    
    try:
        # Connect to server
        if not await agent.connect_to_server():
            return
        
        # Interactive loop
        print("\\n💬 Agent is ready! Type 'quit' to exit.")
        while True:
            user_input = input("\\n🤖 You: ")
            if user_input.lower() in ['quit', 'exit', 'q']:
                break
            
            print("\\n🔄 Processing...")
            result = await agent.run(user_input)
            print(f"\\n📤 Agent: {{result}}")
    
    except KeyboardInterrupt:
        print("\\n\\n👋 Goodbye!")
    finally:
        await agent.close()

if __name__ == "__main__":
    asyncio.run(main())
'''
        return code
    
    def generate_setup_instructions(self, server_name: str, auth_model: str) -> str:
        """Generate setup instructions"""
        
        instructions = f"""# Setup Instructions for {server_name}

## 1. Install Dependencies

```bash
pip install langchain langchain-openai modelcontextprotocol python-dotenv
```

## 2. Set Environment Variables

Create a `.env` file in your project directory:

```bash
# OpenAI API Key (required)
OPENAI_API_KEY=your_openai_api_key_here
"""

        if auth_model == 'oauth2':
            instructions += f"""
# OAuth2 Configuration for {server_name}
{server_name.upper().replace('-', '_')}_CLIENT_ID=your_client_id
{server_name.upper().replace('-', '_')}_CLIENT_SECRET=your_client_secret
"""
        elif auth_model == 'api_key':
            instructions += f"""
# API Key Configuration for {server_name}
{server_name.upper().replace('-', '_')}_API_KEY=your_api_key
"""
        elif auth_model == 'username_password':
            instructions += f"""
# Username/Password Configuration for {server_name}
{server_name.upper().replace('-', '_')}_USERNAME=your_username
{server_name.upper().replace('-', '_')}_PASSWORD=your_password
"""

        instructions += f"""
## 3. Run the Agent

```bash
python {server_name.replace('-', '_')}_agent.py
```

## 4. Usage

- The agent will connect to {server_name} automatically
- You can interact with it using natural language
- Type 'quit' to exit

## 5. Security Notes

- Keep your API keys secure
- Never commit credentials to version control
- Use environment variables for sensitive data
- Consider using a secrets manager for production

Generated by MCP Guardian - AI-powered security-first MCP server discovery
"""
        
        return instructions
    
    def generate_requirements(self) -> str:
        """Generate requirements.txt"""
        return """langchain>=0.1.0
langchain-openai>=0.1.0
modelcontextprotocol>=0.1.0
python-dotenv>=1.0.0
"""
    
    def generate_env_template(self, server_name: str, auth_model: str) -> str:
        """Generate .env.template"""
        
        env_content = f"""# Environment variables for {server_name} agent
# Copy this to .env and fill in your actual values

# OpenAI API Key (required)
OPENAI_API_KEY=your_openai_api_key_here
"""
        
        if auth_model == 'oauth2':
            env_content += f"""
# OAuth2 Configuration
{server_name.upper().replace('-', '_')}_CLIENT_ID=your_client_id
{server_name.upper().replace('-', '_')}_CLIENT_SECRET=your_client_secret
"""
        elif auth_model == 'api_key':
            env_content += f"""
# API Key Configuration
{server_name.upper().replace('-', '_')}_API_KEY=your_api_key
"""
        elif auth_model == 'username_password':
            env_content += f"""
# Username/Password Configuration
{server_name.upper().replace('-', '_')}_USERNAME=your_username
{server_name.upper().replace('-', '_')}_PASSWORD=your_password
"""
        
        return env_content
    
    def _extract_main_capability(self, prompt: str, capabilities: List[str]) -> str:
        """Extract the main capability from the prompt"""
        prompt_lower = prompt.lower()
        
        if any(word in prompt_lower for word in ["file", "files", "upload", "download", "storage"]):
            return "file operations"
        elif any(word in prompt_lower for word in ["email", "mail", "send", "receive"]):
            return "email management"
        elif any(word in prompt_lower for word in ["database", "db", "query", "sql"]):
            return "database operations"
        elif any(word in prompt_lower for word in ["search", "find", "index"]):
            return "search operations"
        else:
            return "general operations"
    
    def _to_class_name(self, server_name: str) -> str:
        """Convert server name to valid Python class name"""
        return ''.join(word.capitalize() for word in server_name.replace('-', '_').split('_'))

def main():
    """Main function to generate downloadable files"""
    print("🚀 MCP Guardian Connector Agent - Downloadable Version")
    print("=" * 60)
    print("Generating downloadable agent files...")
    print("=" * 60)
    
    # Example server information
    server_info = {
        "name": "google-drive-mcp-server",
        "endpoint": "https://api.drive-mcp.com",
        "auth_model": "oauth2",
        "capabilities": ["file_upload", "file_download", "file_sharing", "collaboration"]
    }
    
    prompt = "Agent that can handle file operations"
    
    # Create connector agent
    agent = ConnectorAgent()
    
    # Generate files
    print(f"\\n🔧 Generating files for {server_info['name']}...")
    
    # Generate agent code
    agent_code = agent.generate_langchain_agent(
        server_info['name'],
        server_info['endpoint'],
        server_info['auth_model'],
        server_info['capabilities'],
        prompt
    )
    
    # Generate setup instructions
    setup_instructions = agent.generate_setup_instructions(
        server_info['name'],
        server_info['auth_model']
    )
    
    # Generate requirements
    requirements = agent.generate_requirements()
    
    # Generate env template
    env_template = agent.generate_env_template(
        server_info['name'],
        server_info['auth_model']
    )
    
    # Save files with proper names
    server_name_clean = server_info['name'].replace('-', '_')
    
    # Save agent code
    agent_filename = f"{server_name_clean}_agent.py"
    with open(agent_filename, 'w') as f:
        f.write(agent_code)
    print(f"💾 Agent code saved to: {agent_filename}")
    
    # Save setup instructions
    instructions_filename = f"{server_name_clean}_setup_instructions.md"
    with open(instructions_filename, 'w') as f:
        f.write(setup_instructions)
    print(f"📋 Setup instructions saved to: {instructions_filename}")
    
    # Save requirements
    requirements_filename = f"{server_name_clean}_requirements.txt"
    with open(requirements_filename, 'w') as f:
        f.write(requirements)
    print(f"📦 Requirements saved to: {requirements_filename}")
    
    # Save env template
    env_filename = f"{server_name_clean}_env_template.txt"
    with open(env_filename, 'w') as f:
        f.write(env_template)
    print(f"🔐 Environment template saved to: {env_filename}")
    
    print("\\n🎉 File generation complete!")
    print("\\n📁 Generated files:")
    print(f"   - {agent_filename} (LangChain agent)")
    print(f"   - {instructions_filename} (Setup instructions)")
    print(f"   - {requirements_filename} (Python dependencies)")
    print(f"   - {env_filename} (Environment variables template)")
    
    print("\\n📋 Next steps:")
    print("1. Install dependencies: pip install -r requirements.txt")
    print("2. Copy env_template.txt to .env and fill in your credentials")
    print("3. Run the agent: python agent_filename")
    print("\\n🔗 Access your web app at: http://localhost:8000")
    
    print("\\n📄 File contents preview:")
    print(f"\\n{agent_filename} (first 200 characters):")
    print(agent_code[:200] + "...")
    
    print(f"\\n{instructions_filename} (first 200 characters):")
    print(setup_instructions[:200] + "...")

if __name__ == "__main__":
    main() 